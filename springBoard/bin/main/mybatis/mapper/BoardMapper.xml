<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.web.springBoard.domain.BoardRepository">
  
  
  <!-- Spring Board Query -->
  <select id="getTotalCount" resultType="int">
  	SELECT COUNT(*) FROM spring_board;
  </select>
  
  
  <!-- 당 게시물의 댓글 갯수와 idx의 범위를 활용하여 게시물을 가져온다.  -->  
  <select id="getPostArr" resultType="com.web.springBoard.vo.PostVO">
  	SELECT * FROM (
		SELECT *,(SELECT COUNT(*) FROM spring_board_comment WHERE comment_sb_idx=sb_idx) 
		AS 
		sb_commentCount FROM spring_board
		ORDER BY 
		sb_idx DESC
			) 
			TT LIMIT #{startNo},#{pageSize};
  </select>
  
  <select id="getPassword" parameterType="String" resultType="String">
  	SELECT sb_password FROM spring_board where sb_idx=#{param1};
  </select>
  
  <select id="getPostByIdx" resultType="com.web.springBoard.vo.PostVO">
  	select * from spring_board where sb_idx=#{param1}
  </select>
  
  <insert id="insertFakeData" parameterType="java.util.Map">
  	INSERT INTO spring_board (sb_writer,sb_title,sb_content,sb_writeDate,sb_hit,sb_password) VALUES('작성자_${num}','테스트 제목_${num}','테스트 컨탠츠_${num}','${date}',0,'0000');
  </insert>
  
  <insert id="insertPost" parameterType="com.web.springBoard.vo.PostVO">
  	INSERT INTO spring_board(sb_writer,sb_title, sb_content, sb_writeDate, sb_hit, sb_password) VALUES(#{sb_writer},#{sb_title},#{sb_content},#{sb_writeDate},0,#{sb_password});
  </insert>
  
  <delete id="deletePost">
  	delete from spring_board where sb_idx=#{param1};
  </delete>
  
  <update id="updatePost" parameterType="com.web.springBoard.vo.PostVO">
  	UPDATE spring_board SET sb_title=#{sb_title}, sb_content=#{sb_content}, sb_writeDate=#{sb_writeDate}, sb_password=#{sb_password} WHERE sb_idx=#{sb_idx};		
  </update>
  
  <update id="plusHit" parameterType="String">
  	update spring_board set sb_hit = sb_hit + 1 where sb_idx=#{param1}
  </update>
  
  
  
  
  
  
	<!-- Spring Board Comment Query -->
	<select id="getCommentCount" parameterType="String" resultType="int">
  		SELECT COUNT(*) FROM spring_board_comment WHERE comment_sb_idx = #{param1};
  	</select>
  
  	<select id="getComments" resultType="com.web.springBoard.vo.CommentVO">
  		SELECT * FROM (
			SELECT * FROM spring_board_comment 
			WHERE comment_sb_idx = #{sb_idx}
			ORDER BY comment_idx DESC
		) TT LIMIT #{startNo},#{pageSize};
  	</select>
  
  	<select id="getCommentPassword" parameterType="String" resultType="String">
  		select comment_password from spring_board_comment where comment_idx = #{param1}
  	</select>
  
	<insert id="insertFakeCommentData" parameterType="java.util.Map">
		INSERT INTO spring_board_comment (comment_sb_idx, comment_writer, comment_password, comment_content, comment_writeDate) VALUES('600','작성자_${num}', '0000', '안녕하세요 저는 작성자_${num} 입니다.','${date}');
	</insert>
  
	<insert id="insertComment" parameterType="com.web.springBoard.vo.CommentVO">
		INSERT INTO spring_board_comment(comment_sb_idx,comment_writer,comment_password,comment_content, comment_writeDate) VALUES('${comment_sb_idx}','${comment_writer}','${comment_password}','${comment_content}','${comment_writeDate}');
	</insert>
  
	<update id="updateComment" parameterType="java.util.Map">
		UPDATE spring_board_comment SET comment_content = #{comment_content} WHERE comment_idx = #{comment_idx};
	</update>
	  
	<delete id="deleteComment" parameterType="String">
	  	DELETE FROM spring_board_comment WHERE comment_idx = #{comment_idx};
	</delete>
   
  
  
  
    
	<insert id="setVisitLog" parameterType="String">
		insert into spring_board_visitlog (visit_logData) values(#{param1})
	</insert>  
 
  
 
 

 
</mapper>